{"version":3,"sources":["components/form.js","App.js","index.js"],"names":["Form","props","addBook","setIsLoading","bookToEdit","setBooks","setMessage","useState","title","setTitle","author","setAuthor","sells","setSells","book","a","fetchOptions","method","headers","body","JSON","stringify","fetch","process","response","json","ok","console","log","status","error","message","id","useEffect","className","onSubmit","e","preventDefault","type","onChange","target","value","step","parseInt","onClick","createBook","editBook","App","books","isLoading","setBookToEdit","getBooks","map","b","style","backgroundColor","deleteBook","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAyIeA,MAtIf,SAAcC,GAAQ,IACZC,EAA4DD,EAA5DC,QAASC,EAAmDF,EAAnDE,aAAcC,EAAqCH,EAArCG,WAAYC,EAAyBJ,EAAzBI,SAAUC,EAAeL,EAAfK,WADlC,EAEOC,mBAAS,IAFhB,mBAEZC,EAFY,KAELC,EAFK,OAGSF,mBAAS,IAHlB,mBAGZG,EAHY,KAGJC,EAHI,OAIOJ,mBAAS,GAJhB,mBAIZK,EAJY,KAILC,EAJK,iDAMnB,WAA0BC,GAA1B,mBAAAC,EAAA,6DACEZ,GAAa,GACPa,EAAe,CACnBC,OAAQ,OACRC,QAAS,CACP,eAAgB,kCAElBC,KAAMC,KAAKC,UAAUP,IAPzB,kBAU2BQ,MACrBC,gDACAP,GAZN,cAUUQ,EAVV,gBAcuBA,EAASC,OAdhC,OAcUN,EAdV,OAeQK,EAASE,IACXC,QAAQC,IAAR,8CACyCR,KAAKC,UAAUF,KAExDjB,EAAQiB,GACRb,EAAW,4BACXqB,QAAQC,IAAI,sBAEZD,QAAQC,IAAR,mCAC8BJ,EAASK,OADvC,cACmDV,EAAKW,MADxD,cACmEX,EAAKY,UAExEzB,EAAW,GAAD,OAAIa,EAAKY,WA1BzB,kDA6BIJ,QAAQC,IAAR,MACAtB,EAAW,qBA9Bf,QAiCEH,GAAa,GAjCf,2DANmB,kEA0CnB,WAAwBW,GAAxB,mBAAAC,EAAA,6DACEX,EAAWI,MAAQA,EACnBJ,EAAWM,OAASA,EACpBN,EAAWQ,MAAQA,EAEbI,EAAe,CACnBC,OAAQ,MACRC,QAAS,CACP,eAAgB,kCAElBC,KAAMC,KAAKC,UAAUP,IAVzB,kBAc2BQ,MAAM,GAAD,OACvBC,gDADuB,YACaT,EAAKkB,IAC5ChB,GAhBN,cAcUQ,EAdV,iBAkBuBA,EAASC,OAlBhC,QAkBUN,EAlBV,OAmBIQ,QAAQC,IAAIT,GACRK,EAASE,IACXxB,EAAQiB,GACRb,EAAW,6BACXqB,QAAQC,IAAI,oBACZvB,EAASc,IAETb,EAAW,GAAD,OAAIa,EAAKY,UA1BzB,kDA6BIJ,QAAQC,IAAR,MACAtB,EAAW,qBA9Bf,2DA1CmB,sBAoFnB,OARA2B,qBAAU,WACJ7B,IACFK,EAASL,EAAWI,OACpBG,EAAUP,EAAWM,QACrBG,EAAST,EAAWQ,UAErB,CAACR,IAGF,uBAAM8B,UAAU,OAAOC,SAAU,SAACC,GAAD,OAAOA,EAAEC,kBAA1C,mBAEE,uBACEH,UAAU,cACVI,KAAK,OACLC,SAAU,SAACH,GAAD,OAAO3B,EAAS2B,EAAEI,OAAOC,QACnCA,MAAOjC,IANX,UASE,uBACE0B,UAAU,cACVI,KAAK,OACLC,SAAU,SAACH,GAAD,OAAOzB,EAAUyB,EAAEI,OAAOC,QACpCA,MAAO/B,IAbX,SAgBE,uBACEwB,UAAU,cACVI,KAAK,SACLI,KAAM,IACND,MAAO7B,EACP2B,SAAU,SAACH,GAAD,OAAOvB,EAAS8B,SAASP,EAAEI,OAAOC,WAE9C,wBACEP,UAAU,eACVU,QAAS,kBA9GI,2CA+GXC,CAAW,CACTrC,MAAOA,EACPE,OAAQA,EACRE,MAAOA,KANb,wBAYA,wBACEsB,UAAU,eACVU,QACiB,OAAfxC,EACI,kBA5HO,2CA4HD0C,CAAS1C,IACfuB,QAAQC,IAAI,2BALpB,0BCzCSmB,MA9Ef,WAAgB,IAAD,EACaxC,mBAAS,IADtB,mBACNyC,EADM,KACC3C,EADD,OAEqBE,oBAAS,GAF9B,mBAEN0C,EAFM,KAEK9C,EAFL,OAGuBI,mBAAS,MAHhC,mBAGNH,EAHM,KAGM8C,EAHN,OAIiB3C,mBAAS,IAJ1B,mBAINwB,EAJM,KAIGzB,EAJH,iDAsBb,WAA0BQ,GAA1B,mBAAAC,EAAA,6DACQC,EAAe,CACnBC,OAAQ,SACRC,QAAS,CACP,eAAgB,mCAJtB,kBAS2BI,MAAM,GAAD,OACvBC,gDADuB,YACaT,EAAKkB,IAC5ChB,GAXN,cASUQ,EATV,gBAauBA,EAASC,OAbhC,OAaUN,EAbV,OAcQK,EAASE,IACXpB,EAAW,8BACXD,EAASc,IAETb,EAAW,GAAD,OAAIa,EAAKY,UAlBzB,kDAqBIJ,QAAQC,IAAR,MACAtB,EAAW,qBAtBf,2DAtBa,sBAgDb,OA3CA2B,qBAAU,WAAM,4CACd,8BAAAlB,EAAA,6DACEZ,GAAa,GADf,kBAG2BmB,MAAM,GAAD,OAAIC,kDAHpC,cAGUC,EAHV,gBAIuBA,EAASC,OAJhC,OAIUN,EAJV,OAKId,EAASc,GALb,kDAOIQ,QAAQC,IAAR,MACAtB,EAAW,qBARf,QAUEH,GAAa,GAVf,2DADc,uBAAC,WAAD,wBAcdgD,KACC,IA6BD,sBAAKjB,UAAU,MAAf,YACGe,GAAY,6CACb,+BAAOlB,IACNiB,EAAMI,KAAI,SAACC,GAAD,OACT,oBACEnB,UAAU,OACVU,QAAS,kBAAMM,EAAcG,IAE7BC,MAAO,CACLC,gBAAgB,GAAD,OAAKnD,IAAeiD,EAAI,OAAS,gBALpD,oBAQUA,EAAE7C,MAAQ,MARpB,WASW6C,EAAE3C,OAAS,MATtB,UAUU2C,EAAEzC,MACV,wBAAQgC,QAAS,kBAhEZ,2CAgEkBY,CAAWH,IAAlC,sBARKA,EAAErB,OAWX,cAAC,EAAD,CACE5B,WAAYA,EACZD,aAAcA,EACdD,QAAS,SAACiB,GAAD,OAAUd,EAAS,GAAD,mBAAK2C,GAAL,CAAY7B,MACvCd,SAAUA,EACVC,WAAYA,QCvEpBmD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.69fd9753.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"../App.css\";\n\nfunction Form(props) {\n  const { addBook, setIsLoading, bookToEdit, setBooks, setMessage } = props;\n  const [title, setTitle] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [sells, setSells] = useState(0);\n\n  async function createBook(book) {\n    setIsLoading(true);\n    const fetchOptions = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json;charset=utf-8\",\n      },\n      body: JSON.stringify(book),\n    };\n    try {\n      const response = await fetch(\n        process.env.REACT_APP_URL_SERVER,\n        fetchOptions\n      );\n      const body = await response.json();\n      if (response.ok) {\n        console.log(\n          `async createBook: received response ${JSON.stringify(body)}`\n        );\n        addBook(body);\n        setMessage(\"Book added successfully.\");\n        console.log(\"createBook: done\");\n      } else {\n        console.log(\n          `async createBook: ERROR: ${response.status} - ${body.error} - ${body.message}`\n        );\n        setMessage(`${body.message}`);\n      }\n    } catch (e) {\n      console.log(e);\n      setMessage(\"Connection error.\");\n    }\n\n    setIsLoading(false);\n  }\n\n  async function editBook(book) {\n    bookToEdit.title = title;\n    bookToEdit.author = author;\n    bookToEdit.sells = sells;\n\n    const fetchOptions = {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json;charset=utf-8\",\n      },\n      body: JSON.stringify(book),\n    };\n\n    try {\n      const response = await fetch(\n        `${process.env.REACT_APP_URL_SERVER}/${book.id}`,\n        fetchOptions\n      );\n      const body = await response.json();\n      console.log(body);\n      if (response.ok) {\n        addBook(body);\n        setMessage(\"Book edited successfully.\");\n        console.log(\"createBook: done\");\n        setBooks(body);\n      } else {\n        setMessage(`${body.message}`);\n      }\n    } catch (e) {\n      console.log(e);\n      setMessage(\"Connection error.\");\n    }\n  }\n\n  useEffect(() => {\n    if (bookToEdit) {\n      setTitle(bookToEdit.title);\n      setAuthor(bookToEdit.author);\n      setSells(bookToEdit.sells);\n    }\n  }, [bookToEdit]);\n\n  return (\n    <form className=\"form\" onSubmit={(e) => e.preventDefault()}>\n      Title:\n      <input\n        className=\"form__input\"\n        type=\"text\"\n        onChange={(e) => setTitle(e.target.value)}\n        value={title}\n      />\n      Author:\n      <input\n        className=\"form__input\"\n        type=\"text\"\n        onChange={(e) => setAuthor(e.target.value)}\n        value={author}\n      />\n      Sells:\n      <input\n        className=\"form__input\"\n        type=\"number\"\n        step={1000}\n        value={sells}\n        onChange={(e) => setSells(parseInt(e.target.value))}\n      />\n      <button\n        className=\"form__button\"\n        onClick={() =>\n          createBook({\n            title: title,\n            author: author,\n            sells: sells,\n          })\n        }\n      >\n        Bevestigen\n      </button>\n      <button\n        className=\"form__button\"\n        onClick={\n          bookToEdit !== null\n            ? () => editBook(bookToEdit)\n            : console.log(\"Deze boek bestaat niet.\")\n        }\n      >\n        Bewerken\n      </button>\n    </form>\n  );\n}\n\nexport default Form;\n","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Form from \"./components/form\";\n\nfunction App() {\n  const [books, setBooks] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [bookToEdit, setBookToEdit] = useState(null);\n  const [message, setMessage] = useState(\"\");\n  useEffect(() => {\n    async function getBooks() {\n      setIsLoading(true);\n      try {\n        const response = await fetch(`${process.env.REACT_APP_URL_SERVER}`);\n        const body = await response.json();\n        setBooks(body);\n      } catch (e) {\n        console.log(e);\n        setMessage(\"Connection error.\");\n      }\n      setIsLoading(false);\n    }\n\n    getBooks();\n  }, []);\n\n  async function deleteBook(book) {\n    const fetchOptions = {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json;charset=utf-8\",\n      },\n    };\n\n    try {\n      const response = await fetch(\n        `${process.env.REACT_APP_URL_SERVER}/${book.id}`,\n        fetchOptions\n      );\n      const body = await response.json();\n      if (response.ok) {\n        setMessage(\"Book deleted successfully.\");\n        setBooks(body);\n      } else {\n        setMessage(`${body.message}`);\n      }\n    } catch (e) {\n      console.log(e);\n      setMessage(\"Connection error.\");\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      {isLoading ? <p>LOADING DATA</p> : false}\n      <span>{message}</span>\n      {books.map((b) => (\n        <p\n          className=\"book\"\n          onClick={() => setBookToEdit(b)}\n          key={b.id}\n          style={{\n            backgroundColor: `${bookToEdit === b ? \"grey\" : \"transparent\"}`,\n          }}\n        >\n          title: {b.title + \" - \"}\n          author: {b.author + \" - \"}\n          sells: {b.sells}\n          <button onClick={() => deleteBook(b)}>Delete</button>\n        </p>\n      ))}\n      <Form\n        bookToEdit={bookToEdit}\n        setIsLoading={setIsLoading}\n        addBook={(body) => setBooks([...books, body])}\n        setBooks={setBooks}\n        setMessage={setMessage}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}
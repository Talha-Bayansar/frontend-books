{"version":3,"sources":["components/form.js","App.js","index.js"],"names":["Form","props","addBook","setIsLoading","bookToEdit","setBooks","setMessage","useState","title","setTitle","author","setAuthor","priceInEuro","setPriceInEuro","book","a","fetchOptions","method","headers","body","JSON","stringify","fetch","process","response","json","ok","console","log","status","error","message","errorMessage","errors","reduce","accumulator","defaultMessage","id","useEffect","className","onSubmit","e","preventDefault","type","onChange","target","value","pattern","min","max","parseInt","onClick","createBook","editBook","App","books","isLoading","setBookToEdit","getBooks","map","b","style","backgroundColor","deleteBook","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1629a926.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"../App.css\";\n\nfunction Form(props) {\n  const { addBook, setIsLoading, bookToEdit, setBooks, setMessage } = props;\n  const [title, setTitle] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [priceInEuro, setPriceInEuro] = useState(0);\n\n  async function createBook(book) {\n    setIsLoading(true);\n    const fetchOptions = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json;charset=utf-8\",\n      },\n      body: JSON.stringify(book),\n    };\n    try {\n      const response = await fetch(\n        process.env.REACT_APP_URL_SERVER,\n        fetchOptions\n      );\n      const body = await response.json();\n      if (response.ok) {\n        console.log(\n          `async createBook: received response ${JSON.stringify(body)}`\n        );\n        addBook(body);\n        setMessage(\"Book added successfully.\");\n        console.log(\"createBook: done\");\n      } else {\n        console.log(\n          `async createBook: ERROR: ${response.status} - ${body.error} - ${body.message}`\n        );\n        const errorMessage =\n          body.errors &&\n          body.errors.reduce(\n            (accumulator, error) =>\n              `${accumulator} ${error.defaultMessage} ---`,\n            \"--- \"\n          );\n        setMessage(errorMessage || body.message);\n      }\n    } catch (e) {\n      console.log(e);\n      setMessage(\"Connection error.\");\n    }\n\n    setIsLoading(false);\n  }\n\n  async function editBook(book) {\n    // book.title = title;\n    // book.author = author;\n    // book.priceInEuro = priceInEuro;\n\n    const fetchOptions = {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json;charset=utf-8\",\n      },\n      body: JSON.stringify({\n        id: book.id,\n        title: title,\n        author: author,\n        priceInEuro: priceInEuro,\n      }),\n    };\n\n    try {\n      const response = await fetch(\n        `${process.env.REACT_APP_URL_SERVER}/${book.id}`,\n        fetchOptions\n      );\n      const body = await response.json();\n      console.log(body);\n      if (response.ok) {\n        setMessage(\"Book edited successfully.\");\n        console.log(\"createBook: done\");\n        setBooks(body);\n      } else {\n        const errorMessage =\n          body.errors &&\n          body.errors.reduce(\n            (accumulator, error) =>\n              `${accumulator} ${error.defaultMessage} ---`,\n            \"--- \"\n          );\n        setMessage(errorMessage || body.message);\n      }\n    } catch (e) {\n      console.log(e);\n      setMessage(\"Connection error.\");\n    }\n  }\n\n  useEffect(() => {\n    if (bookToEdit) {\n      setTitle(bookToEdit.title);\n      setAuthor(bookToEdit.author);\n      setPriceInEuro(bookToEdit.priceInEuro);\n    }\n  }, [bookToEdit]);\n\n  return (\n    <form\n      className=\"form\"\n      onSubmit={(e) => {\n        e.preventDefault();\n      }}\n    >\n      Title:\n      <input\n        className=\"form__input\"\n        type=\"text\"\n        onChange={(e) => setTitle(e.target.value)}\n        value={title}\n        pattern=\"(.|\\s)*\\S(.|\\s)*\"\n      />\n      Author:\n      <input\n        className=\"form__input\"\n        type=\"text\"\n        onChange={(e) => setAuthor(e.target.value)}\n        value={author}\n        pattern=\"^[a-zA-Z]+$\"\n      />\n      Price:\n      <input\n        className=\"form__input\"\n        type=\"number\"\n        min={0}\n        max={2000}\n        value={priceInEuro}\n        onChange={(e) => setPriceInEuro(parseInt(e.target.value))}\n      />\n      <button\n        className=\"form__button\"\n        onClick={() =>\n          createBook({\n            title: title,\n            author: author,\n            priceInEuro: priceInEuro,\n          })\n        }\n      >\n        Bevestigen\n      </button>\n      <button\n        className=\"form__button\"\n        onClick={\n          bookToEdit !== null\n            ? () => editBook(bookToEdit)\n            : console.log(\"Deze boek bestaat niet.\")\n        }\n      >\n        Bewerken\n      </button>\n    </form>\n  );\n}\n\nexport default Form;\n","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Form from \"./components/form\";\n\nfunction App() {\n  const [books, setBooks] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [bookToEdit, setBookToEdit] = useState(null);\n  const [message, setMessage] = useState(\"\");\n  useEffect(() => {\n    async function getBooks() {\n      setIsLoading(true);\n      try {\n        const response = await fetch(`${process.env.REACT_APP_URL_SERVER}`);\n        const body = await response.json();\n        setBooks(body);\n      } catch (e) {\n        console.log(e);\n        setMessage(\"Connection error.\");\n      }\n      setIsLoading(false);\n    }\n\n    getBooks();\n  }, []);\n\n  async function deleteBook(book) {\n    const fetchOptions = {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json;charset=utf-8\",\n      },\n    };\n\n    try {\n      const response = await fetch(\n        `${process.env.REACT_APP_URL_SERVER}/${book.id}`,\n        fetchOptions\n      );\n      const body = await response.json();\n      if (response.ok) {\n        setMessage(\"Book deleted successfully.\");\n        setBooks(body);\n      } else {\n        setMessage(`${body.message}`);\n      }\n    } catch (e) {\n      console.log(e);\n      setMessage(\"Connection error.\");\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      {isLoading ? <p>LOADING DATA</p> : false}\n      <span>{message}</span>\n      {books.map((b) => (\n        <p\n          className=\"book\"\n          onClick={() => setBookToEdit(b)}\n          key={b.id}\n          style={{\n            backgroundColor: `${bookToEdit === b ? \"grey\" : \"transparent\"}`,\n          }}\n        >\n          title: {b.title + \" - \"}\n          author: {b.author + \" - \"}\n          price: {b.priceInEuro}\n          <button onClick={() => deleteBook(b)}>Delete</button>\n        </p>\n      ))}\n      <Form\n        bookToEdit={bookToEdit}\n        setIsLoading={setIsLoading}\n        addBook={(body) => setBooks([...books, body])}\n        setBooks={setBooks}\n        setMessage={setMessage}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}